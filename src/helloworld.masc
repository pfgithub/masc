\.data
\    helloworldtxt: .asciiz "Hello, World!"
\.text

var t0: u32 = 0;
var t1: u32 = 1;
var t2: u32 = 2;
t2 = t2;
t1 = t1;
t0 = t0;
\# the issue here is that the code does not know it cannot reuse t0 because it sees a t0 use below but after the last this use.
\# it actually needs to know if the variable is being used or assigned.
\# if it is being assigned, that should add to updatedUnavRegi. if it is being used, it should be immediately discarded as a choice.
\# this will require annotating assignments like % % assign or something (or switching to arrays like a resonable person)

var x: u32 = 5;
x = x + 2;
var y: u32 = 10;

$v0 = 36;
$a0 = x;
\syscall
!clear $call;

var z: u32 = 8;
y = y + 1;
x = x + 3;

var expct_s0: u32 = 8;

if z == 8 {
    var expct_s1: u32 = 5;
    
    $v0 = 4;
    \la $a0, helloworldtxt
    \syscall
    !clear $call;
    
    expct_s1 = expct_s1 + 1;
}

expct_s0 = expct_s0 + 3;

\\# loops will have some implications for register selection, so TODO.