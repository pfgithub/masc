.data
    array: .word -5, 10, 20, 14, 17, 26, 42, 22, 19, -5
    length: 10
.text
j main
# ====================


# jal longest_increasing_sequence
# args:
#    $a0: array - [*]i32
#    $a1: length - i32
# return:
#    $v0: i32
# ====================
longest_increasing_sequence:
    # body
    li $t0 1                                      #     var current: i32 = 1
    move $t1 $zero                                #     var longest: i32 = 0
    mulo $t2, $a1 4                               #     .                    length * 4
    addu $t2, $t2 $a0                             #     |                    ^^^^^^^^^^ + array
    la $t2 ($t2)                                  #     var final: [*]i32 = (^^^^^^^^^^^^^^^^^^).*
    bgt $a1 1, if_end                             #     if length <= 1 {
        move $v0 $a1                              #         .      length
        j return_longest_increasing_sequence      #         return ^^^^^^;
    if_end:                                       #     }
    loop_start:                                   #     loop {
        la $t3 4($a0)                             #         .  array[1]
        bne $t3 $t2, if_end_2                     #         if ^^^^^^^^ == final {
            move $v0 $t1                          #             .      longest
            j return_longest_increasing_sequence  #             return ^^^^^^^;
        if_end_2:                                 #         }
        lw $t3 4($a0)                             #         var item: i32 = array[1]
        lw $t4 ($a0)                              #         var previous: i32 = array[0]
        ble $t3 $t4, if_end_4                     #         if item > previous {
            add $t0, $t0 1                        #             current = current + 1
        j if_end_6                                #         }
        if_end_4:                                 #         else {
            li $t0 1                              #             current = 1
        if_end_6:                                 #         }
        ble $t0 $t1, if_end_8                     #         if current > longest {
            move $t1 $t0                          #             longest = current
        if_end_8:                                 #         }
        la $a0 4($a0)                             #         array = array[1]
    j loop_start                                  #     }
                                                  #
return_longest_increasing_sequence:               #
jr $ra                                            # }

main:
la $a0 array
lw $a1 length
jal longest_increasing_sequence
move $a0 $v0
li $v0 1
syscall