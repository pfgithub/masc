.macro write_str (%str)
    .data
        string: .asciiz %str
    .text
        li $v0, 4
        la $a0, string
        syscall
.end_macro
.text
j returns_skip_1    # fn returns(innum: u32) i32 {
returns_call_1:
    # save args
    
    # body
    bne $a0 1, if_end_1#     if innum == 1 {return 15;}
        li $t0 15   #                    return 15;
        jr $ra
    if_end_1:
    li $t0 34       #     return 34;
    jr $ra
jr $ra
returns_skip_1:
j noreturn_skip_1   # fn noreturn() void {}
noreturn_call_1:
    # body
jr $ra
noreturn_skip_1:

move $t1 $zero      # var result1: i32 = inline_returns(0);
bne $t1 1, if_end_2
    li $t1 12
    j inline_returns_return_1
if_end_2:
li $t1 25
j inline_returns_return_1
inline_returns_return_1:
move $t2 $t1
write_str("expected 25: ")
move $t1 $t2        # write_int(result1);
li $v0 1
move $a0 $t1
syscall
move $t1 $t2
move $t1 $t2
write_str("\n")

li $a0 1            # var result2: i32 = returns(1);
jal returns_call_1
move $t1 $t0
write_str("expected 15: ")
move $t1 $t1        # write_int(result2);
li $v0 1
move $a0 $t1
syscall
move $t1 $t2
move $t1 $t2
write_str("\n")

jal noreturn_call_1 # noreturn();
move $t1 $t0

move $a0 $zero      # var result3: i32 = returns(0);
jal returns_call_1
move $t1 $t0
write_str("expected 34: ")
move $t0 $t1        # write_int(result3);
li $v0 1
move $a0 $t0
syscall
move $t0 $t1
move $t0 $t1
write_str("\n")

li $t0 1            # var result4: i32 = inline_returns(1);
bne $t0 1, if_end_3
    li $t0 12
    j inline_returns_return_2
if_end_3:
li $t0 25
j inline_returns_return_2
inline_returns_return_2:
move $t1 $t0
write_str("expected 12: ")
move $t0 $t1        # write_int(result4);
li $v0 1
move $a0 $t0
syscall
move $t0 $t1
move $t0 $t1
write_str("\n")