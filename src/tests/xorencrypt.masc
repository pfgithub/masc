\.macro print_str (%str)
\    .data
\        string: .asciiz %str
\    .text
\        li $v0, 4
\        la $a0, string
\        syscall
\.end_macro
\.text

inline fn syscall() void {
	\syscall
	!clear $call;
}

inline fn read_string(buffer: [*]u8, max_len: u32) void {
	$v0 = 8;
	$a0 = buffer;
	$a1 = max_len;
	syscall();
}

inline fn print_string(string: [*]u8) void {
    $v0 = 4;
    $a0 = string;
    syscall();
}

fn translate(message: [*]u8, key: [*]u8) void {
	\# get length of key
	var key_len: u32 = 0;
	loop {
		if key[key_len] == 0 {break;}
		key_len = key_len + 1;
	}
	
	\# encrypt/decrypt message
	var index: u32 = 0;
	loop {
		if message[index] == 0 {break;}
		save message[index] = message[index] ^ key[index % key_len];
		index = index + 1;
	}
}

$sp = $sp - 255;
var key: [*]u8 = $sp + 128;
\print_str("Plain text:\n  ")
read_string($sp, 128);
\print_str("Key:\n  ")
read_string(key, 128);
translate($sp, key);
\print_str("Cipher text:\n  ")
print_string($sp);
\print_str("Decrypted:\n  ")
print_string($sp);