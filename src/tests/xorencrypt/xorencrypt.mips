.macro print_str (%str)
    .data
        string: .asciiz %str
    .text
        li $v0, 4
        la $a0, string
        syscall
.end_macro
.text
j main
# ====================
# jal call_read_until_newline
# args:
#   $a0: buffer - [*]u8
#   $a1: max_len - u32
# return: none
# ====================
call_read_until_newline:
    # save used s registers to stack
    subiu $sp, $sp, 4
    sw $s0, 0($sp)
    move $s0 $a0
    # body
    move $t0 $s0
    move $t1 $a1
    li $v0 8
    move $a0 $t0
    move $a1 $t1
    syscall
    move $t0 $s0
    loop_start:
        lb $t1 ($t0)
        bne $t1 13, if_end
            j loop_end
        if_end:
        lb $t1 ($t0)
        bne $t1 10, if_end_2
            j loop_end
        if_end_2:
        la $t0 1($t0)
    j loop_start
    loop_end:
    sb $zero ($t0)
    
    # reload used s registers from stack
    lw $s0, 0($sp)
    addiu $sp, $sp, 4
jr $ra
# ====================
# jal call_translate
# args:
#   $a0: message - [*]u8
#   $a1: key - [*]u8
# return: none
# ====================
call_translate:
    # body
    # get length of key
    move $t0 $zero
    loop_start_2:
        add $t1, $t0 $a1
        lb $t1 ($t1)
        bnez $t1, if_end_4
            j loop_end_2
        if_end_4:
        addu $t0, $t0 1
    j loop_start_2
    loop_end_2:
    # encrypt/decrypt message
    move $t1 $zero
    loop_start_4:
        add $t2, $t1 $a0
        lb $t2 ($t2)
        bnez $t2, if_end_6
            j loop_end_4
        if_end_6:
        add $t2, $t1 $a0
        lb $t2 ($t2)
        remu $t3, $t1 $t0
        add $t3, $t3 $a1
        lb $t3 ($t3)
        xor $t2 $t2 $t3
        add $t3, $t1 $a0
        sb $t2 ($t3)
        addu $t1, $t1 1
    j loop_start_4
    loop_end_4:
jr $ra
main:
subu $sp, $sp 256
addu $s0, $sp 128

print_str("Plain text:\n  ")
move $a0 $sp
li $a1 128
jal call_read_until_newline

print_str("Key:\n  ")
move $a0 $s0
li $a1 128
jal call_read_until_newline

print_str("Encrypted:\n  ")
move $a0 $sp
move $a1 $s0
jal call_translate
move $t1 $sp
li $v0 4
move $a0 $t1
syscall

print_str("\nDecrypted:\n  ")
move $a0 $sp
move $a1 $s0
jal call_translate
li $v0 4
move $a0 $sp
syscall
print_str("\n")