.macro print_str (%str)                           # .macro print_str (%str)
    .data                                         #     .data
        string: .asciiz %str                      #         string: .asciiz %str
    .text                                         #     .text
        li $v0, 4                                 #         li $v0, 4
        la $a0, string                            #         la $a0, string
        syscall                                   #         syscall
.end_macro                                        # .end_macro
.text                                             # .text
j main                                            # j main
# ====================
# jal call_read_until_newline
# args:
#    $a0: buffer - [*]u8
#    $a1: max_len - u32
# return: none
# ====================
call_read_until_newline:                          # fn read_until_newline(buffer: [*]u8, max_len: u32) void{
    # save used s registers to stack
    subiu $sp, $sp, 8                             #     $sp = &$sp[-2]
    sw $s0, 0($sp)                                #     $sp[0] = $s0
    sw $ra, 4($sp)                                #     $sp[1] = $ra
                                                  #
    move $s0 $a0                                  #     buffer = $a0
    # body
    move $t0 $s0                                  #     .           buffer
    move $t1 $a1                                  #     |                   max_len
    li $v0 8                                      #     read_string(^^^^^^, ^^^^^^^)
    move $a0 $t0                                  #
    move $a1 $t1                                  #
    syscall                                       #
    loop_start:                                   #     loop {
        lbu $t0 ($s0)                             #         .  addr[0]
        bequ $t0 13, loop_end                     #         if ^^^^^^^ == 13 { break; }
        lbu $t0 ($s0)                             #         .  addr[0]
        bequ $t0 10, loop_end                     #         if ^^^^^^^ == 10 { break; }
        la $s0 1($s0)                             #         addr = addr[1]
    j loop_start                                  #     }
    loop_end:                                     #     ^
    sb $zero ($s0)                                #     addr[0] = 0
                                                  #
    # reload used s registers from stack
    lw $s0, 0($sp)                                #     $s0 = $sp[0]
    lw $ra, 4($sp)                                #     $ra = $sp[1]
    addiu $sp, $sp, 8                             #     $sp = &$sp[2]
jr $ra                                            # }
# ====================
# jal call_translate
# args:
#    $a0: message - [*]u8
#    $a1: key - [*]u8
# return: none
# ====================
call_translate:                                   # fn translate(message: [*]u8, key: [*]u8) void{
    # save used s registers to stack
    subiu $sp, $sp, 4                             #     $sp = &$sp[-1]
    sw $ra, 0($sp)                                #     $sp[0] = $ra
                                                  #
    # body
    # get length of key
    move $t0 $zero                                #     var key_len: u32 = 0
    loop_start_2:                                 #     loop {
        addu $t1, $t0 $a1                         #         .   key_len + key
        lbu $t1 ($t1)                             #         |  (^^^^^^^^^^^^^).*
        beqz $t1, loop_end_2                      #         if ^^^^^^^^^^^^^^^^^ == 0 { break; }
        addu $t0, $t0 1                           #         key_len = key_len + 1
    j loop_start_2                                #     }
    loop_end_2:                                   #     ^
    # encrypt/decrypt message
    move $t1 $zero                                #     var index: u32 = 0
    loop_start_4:                                 #     loop {
        addu $t2, $t1 $a0                         #         .   index + message
        lbu $t2 ($t2)                             #         |  (^^^^^^^^^^^^^^^).*
        beqz $t2, loop_end_4                      #         if ^^^^^^^^^^^^^^^^^^^ == 0 { break; }
        addu $t2, $t1 $a0                         #         .                      index + message
        lbu $t2 ($t2)                             #         |                     (^^^^^^^^^^^^^^^).*
        remu $t3, $t1 $t0                         #         |                                            index % key_len
        addu $t3, $t3 $a1                         #         |                                            ^^^^^^^^^^^^^^^ + key
        lbu $t3 ($t3)                             #         |                                           (^^^^^^^^^^^^^^^^^^^^^).*
        xor $t2 $t2 $t3                           #         |                     ^^^^^^^^^^^^^^^^^^^ ^ ^^^^^^^^^^^^^^^^^^^^^^^^^
        addu $t3, $t1 $a0                         #         |index + message
        sb $t2 ($t3)                              #         (^^^^^^^^^^^^^^^).* = ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        addu $t1, $t1 1                           #         index = index + 1
    j loop_start_4                                #     }
    loop_end_4:                                   #     ^
                                                  #
    # reload used s registers from stack
    lw $ra, 0($sp)                                #     $ra = $sp[0]
    addiu $sp, $sp, 4                             #     $sp = &$sp[1]
jr $ra                                            # }
main:                                             # main:
subu $sp, $sp 256                                 # $sp = $sp - 256
addu $s0, $sp 128                                 # var key: [*]u8 = $sp + 128
                                                  #
print_str("Plain text:\n  ")                      # print_str("Plain text:\n  ")
move $a0 $sp                                      # .                                      $sp
li $a1 128                                        # |                                           128
jal call_read_until_newline                       # %%:register:v0:%% = read_until_newline(^^^, ^^^)
                                                  #
print_str("Key:\n  ")                             # print_str("Key:\n  ")
move $a0 $s0                                      # .                                      key
li $a1 128                                        # |                                           128
jal call_read_until_newline                       # %%:register:v0:%% = read_until_newline(^^^, ^^^)
                                                  #
print_str("Encrypted:\n  ")                       # print_str("Encrypted:\n  ")
move $a0 $sp                                      # .                             $sp
move $a1 $s0                                      # |                                  key
jal call_translate                                # %%:register:v0:%% = translate(^^^, ^^^)
move $t0 $sp                                      # .            $sp
li $v0 4                                          # print_string(^^^)
move $a0 $t0                                      #
syscall                                           #
                                                  #
print_str("\nDecrypted:\n  ")                     # print_str("\nDecrypted:\n  ")
move $a0 $sp                                      # .                             $sp
move $a1 $s0                                      # |                                  key
jal call_translate                                # %%:register:v0:%% = translate(^^^, ^^^)
li $v0 4                                          # print_string($sp)
move $a0 $sp                                      #
syscall                                           #
print_str("\n")                                   # print_str("\n")